version: '3.8'
services:

  # Auth service
  auth-service:
    image: vinsonwong/graphql-rust:auth-service
    container_name: auth-service
    restart: always
    depends_on:
      - users-db
    environment:
      DATABASE_URL: postgres://postgres:pokemon889@users-db/users
      PASSWORD_SECRET_KEY: $PASSWORD_SECRET_KEY
      JWT_SECRET_KEY: $JWT_SECRET_KEY
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8003/" ]
      interval: 1m
      timeout: 3s
      start_period: 10s
      retries: 3
    ports:
      - 8003:8003
  users-db:
    image: postgres
    container_name: users-db
    restart: always
    environment:
      POSTGRES_DB: users
      POSTGRES_PASSWORD: pokemon889
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1m
      timeout: 5s
      start_period: 10s
      retries: 3
    ports:
      - 5432:5432

  # Apollo server
  apollo-server:
    image: vinsonwong/graphql-rust:apollo-server
    container_name: apollo-server
    restart: always
    depends_on:
      - auth-service
    environment:
      NODE_ENV: docker
      WAIT_HOSTS: auth-service:8003
    ports:
      - 4000:4000
   # command: bash -c "./wait-for-it.sh --timeout=0 auth-service:8003 && npm run start-gateway"

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    restart: always
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "2181" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 10s
    ports:
      - 2181:2181

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "$KAFKA_TOPIC:1:1"
    ports:
      - 9092:9092
